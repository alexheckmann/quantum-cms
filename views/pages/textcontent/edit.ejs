<div class="d-flex flex-grow-1 flex-shrink-1 flex-wrap">
    <%- partial('../../partials/textcontent/app-nav.ejs'); %>
    <!-- TODO QNTM-63 -->
    <div class="flex-fill grey-background d-flex flex-row" role="dialog" id="editor">
        <form class="flex-fill">
            <div class="d-flex flex-row align-items-center justify-content-between" style="height: 72px">
                <div class="pl-4 pt-3">
                    <h1 v-cloak>
                        {{ title }}
                    </h1>
                </div>
                <label class="mr-4 mb-0 px-3 py-2 shape-rounded-corners-small font-extra-small-text font-weight-bold"
                       v-bind:class="state.COLOR" v-cloak>
                    {{ state.TEXT }}
                </label>
            </div>
            <div class="d-flex flex-wrap pt-3">
                <div class="flex-fill px-3">
                    <div class="bg-white shape-drop-shadow-straight shape-rounded-corners-big p-3 flex-grow-1 mb-4">
                        <div>
                            <div class="font-weight-bold font-extra-small-text">
                                <label for="entryTitle">Title:</label>
                            </div>
                            <textarea class="form-control flex-grow-1" name="title" type="text" minlength="1"
                                      maxlength="80" id="entryTitle" cols="30" rows="1" required
                                      v-model="title" @input="changeStatus"></textarea>
                            <div class="mt-4 font-weight-bold font-extra-small-text">
                                <label for="entryContent">Content:</label>
                            </div>
                            <textarea class="form-control flex-grow-1" name="content" type="text" minlength="2"
                                      maxlength="1024" id="entryContent" cols="30" rows="15" required
                                      v-model="content" @input="changeStatus"></textarea>
                            <div class="invalid-feedback">Please enter your content.</div>
                        </div>
                    </div>
                </div>
                <div class="flex-fill px-3 app-info-column">
                    <div class="bg-white shape-drop-shadow-straight shape-rounded-corners-big p-3 justify-content-center mb-4">
                        <div class="d-flex flex-column">
                            <div>
                                <h4>Information</h4>
                            </div>
                            <div class="qntm-pricing-separator-line mb-2 pt-1"></div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Created:</span>
                                <span v-cloak>{{ createdAt }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Updated:</span>
                                <span v-cloak>{{ updatedAt }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Author:</span>
                                <span class="text-truncate" v-cloak>{{ author }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Editor:</span>

                                <span class="text-truncate" v-cloak>
                                    {{ updatedFrom }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-white shape-rounded-corners-big d-flex flex-column shape-drop-shadow-straight p-3">
                        <!-- TODO QTNM-40 tags -->
                        <div class="ml-1 font-extra-small-text font-weight-bold float-left">
                            <label class="mb-1">Tags:</label>
                        </div>
                        <div class="d-flex flex-row flex-wrap w-100" style="height: 90px">
                            <% textcontent.tags.forEach(function(entry){ %>
                                <a href="/dashboard/tag/motorsports"
                                   class="d-flex border px-2 mr-1 mt-1 shape-rounded-corners-big align-items-center flex-nowrap app-tag-container">
                                        <span class="font-extra-small-text font-weight-bold"
                                              style="color: <%= entry.colour %>">●</span>
                                    <span class="px-1 font-extra-small-text font-weight-bold"><%= entry.name %></span>
                                    <span class="font-extra-small-text font-weight-bold app-tag-close-button shape-rounded-corners-big"></span>
                                </a>
                            <% }); %>
                            <a href="/dashboard/tag/motorsports"
                               class="d-flex border px-2 mr-1 mt-1 shape-rounded-corners-big align-items-center flex-nowrap app-tag-container">
                                <span class="font-extra-small-text font-weight-bold"
                                      style="color: lightseagreen">●</span>
                                <span class="px-1 font-extra-small-text font-weight-bold text-truncate"
                                      style="max-width: 100px">Motorsports</span>
                                <span class="font-extra-small-text font-weight-bold app-tag-close-button shape-rounded-corners-big"></span>
                            </a>
                            <a href="/dashboard/tag/new" id="app-tag-add-container"
                               class="d-flex border px-2 mr-1 mt-1 shape-rounded-corners-big align-items-center flex-nowrap">
                                <span class="font-extra-small-text font-weight-bold">+</span>
                            </a>
                        </div>
                        <!-- TODO QNTM-69 Text Versioning -->
                        <div class="app-dropdown my-3">
                            <button type="button" aria-haspopup="true" aria-expanded="false" @click="listOldVersions"
                                    @blur="hideOldVersions"
                                    class="qntm-primary-button grey-background w-100 shape-rounded-corners-small border dropdown-toggle font-special-text font-extra-small-text grey-font">
                                Retrieve older versions
                            </button>
                            <div id="dropdownList" class="app-dropdown-content">
                                <button type="button" class="grey-font text-center" v-for="ov in oldVersions" v-cloak>
                                    {{ ov.updatedAt }}
                                </button>
                            </div>
                        </div>
                        <div class="ml-1 font-extra-small-text font-weight-bold float-left">
                            <label for="entry_endpoint" class="mb-1">Endpoint:</label>
                        </div>
                        <div class="d-flex flex-column justify-content-center align-items-center">
                            <div class="mb-2 d-flex align-items-center grey-background border shape-rounded-corners-small"
                                 id="entry_endpoint_container">
                                <textarea name="endpoint" type="text" id="entry_endpoint"
                                          cols="30" rows="1"
                                          class="text-truncate font-extra-small-text border-0 mr-2 grey-background"
                                          readonly v-model="endpoint"></textarea>
                                <img src="/images/icon-copy.svg" alt="Copy to clipboard"
                                     id="app-copy-button-icon"
                                     class="d-inline-block flex-shrink-0 mr-1 qntm-icon-button">
                            </div>
                            <div class="d-flex align-items-center align-content-center mt-2">
                                <div class="d-flex align-items-center">
                                    <span class="font-extra-small-text font-weight-bold ml-2 mr-3">Delete?</span>
                                    <div class="material-switch pull-right">
                                        <input id="app-delete-confirmation" name="delete-switch" type="checkbox"/>
                                        <label for="app-delete-confirmation" class="label-danger"></label>
                                    </div>
                                </div>
                                <div class="ml-3 mr-1">
                                    <button id="app-delete-button"
                                            class="qntm-primary-button qntm-secondary-button shape-rounded-corners-small font-special-text border-0"
                                            type="button" @click="destroy">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-around align-content-center align-items-center my-4">
                        <div>
                            <button class="qntm-primary-button shape-rounded-corners-small font-special-text border-0"
                                    type="button" @click="update">
                                Save
                            </button>
                        </div>
                        <div>
                            <button class="qntm-primary-button qntm-secondary-button shape-rounded-corners-small font-special-text border-0"
                                    type="button" @click="reset">
                                Revert
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <%- exposeLocalsToBrowser() %>
    <script>
      window.onload = () => {
        /* creating an enum for text state */
        const State = Object.freeze({
          ACTIVE: {
            TEXT: '✓ published',
            COLOR: 'editor-status-saved'
          },
          UNPUBLISHED: {
            TEXT: '⚠ unpublished changes',
            COLOR: 'editor-status-unpublished'
          },
        });

        /* Converts a JS timestamp from milliseconds to readable time format */
        const convertDate = (date) => {
          let ISODate = new Date(date);

          let day = ISODate.getDate();
          let month = ISODate.getMonth() + 1;
          let year = ISODate.getFullYear();
          let hour = ISODate.getHours();
          let min = ISODate.getMinutes();

          // adds leading zero
          month = (month < 10 ? '0' : '') + month;
          day = (day < 10 ? '0' : '') + day;
          hour = (hour < 10 ? '0' : '') + hour;
          min = (min < 10 ? '0' : '') + min;

          return day + '/' + month + '/' + year + ' ' + hour + ':' + min;
        };

        let app = new Vue({
          el: '#editor',
          data: {
            csrf: window.SAILS_LOCALS.csrf,
            id: '<%= textcontent.id; %>',
            title: '<%= textcontent.title; %>',
            originalTitle: '<%= textcontent.title; %>',
            content: '<%= textcontent.content; %>',
            originalContent: '<%= textcontent.content; %>',
            state: State.ACTIVE,
            createdAt: '<%= textcontent.createdAt; %>',
            updatedAt: '<%= textcontent.updatedAt; %>',
            author: '<%= textcontent.author.fullName; %>',
            updatedFrom: '<% if (textcontent.updatedFrom != null) { %><%= textcontent.updatedFrom.fullName; %><% } else { %>–<% } %>',
            endpoint: '<%= textcontent.endpoint; %>',
            oldVersions: [],
          },
          methods: {
            update: function () {
              const formData = {
                id: this.id,
                title: this.title,
                content: this.content
              };
              const body = JSON.stringify(formData);
              const postForm = (body) => {
                let url = window.location.origin;
                return fetch(url + '/api/textcontent/update', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': window.SAILS_LOCALS._csrf
                  },
                  body
                });
              };
              postForm(body)
                .then(res => res.json())
                .then(data => {
                  this.updatedAt = convertDate(data.updatedAt);
                  this.updatedFrom = data.updatedFrom;
                  this.state = State.ACTIVE;
                });
            },
            destroy: function () {
              let id = this.id;
              let url = new URL(window.location.origin + '/api/textcontent/destroy');
              url.searchParams.append('id', id);

              fetch(url).then(() => {
                window.location = '/dashboard/text';
              });
            },
            loadOldVersions: function () {
              // loads old versions
              let id = this.id;
              let url = new URL(window.location.origin + '/api/textcontent/findoldversions');
              url.searchParams.append('id', id);

              fetch(url)
                .then(res => res.json())
                .then((data) => {
                  data.forEach(entry => {
                    entry.updatedAt = convertDate(entry.updatedAt);
                    this.oldVersions.push(entry);
                  });
                  console.log(this.oldVersions);
                });
            },
            listOldVersions: function () {
              let x = document.getElementById('dropdownList');
              if (x.className.indexOf('show') === -1) {
                x.className += ' show';
              } else {
                x.className = x.className.replace(' show', '');
              }
            },
            /* Hides dropdown when it loses focus */
            hideOldVersions: function () {
              let x = document.getElementById('dropdownList');
              x.className = x.className.replace(' show', '');
            },
            reset: function () {
              this.title = this.originalTitle;
              this.content = this.originalContent;
              this.state = State.ACTIVE;
            },
            changeStatus: function () {
              if (this.title !== this.originalTitle || this.content !== this.originalContent) {
                this.state = State.UNPUBLISHED;
              } else {
                this.state = State.ACTIVE;
              }
            }
          },
          /* executes this function when Vue if fully loaded */
          mounted() {
            this.createdAt = convertDate(parseInt(this.createdAt));
            this.updatedAt = convertDate(parseInt(this.updatedAt));

            this.loadOldVersions();
          }
        });
      };
    </script>
</div>
