<link rel="prefetch" href="/api/groups/findgrps">
<div class="d-flex flex-grow-1 flex-shrink-1 flex-wrap" id="editor">
    <div class="qntm-app-navbar-container d-flex flex-wrap flex-fill border-right align-items-start" role="menubar">
        <ul class="qntm-app-navbar-links m-0 py-3 pl-0" role="menu">
            <div class="d-flex flex-nowrap mb-3 pl-4">
                <form class="d-flex justify-content-between border shape-rounded-corners-small w-75 mr-1"
                      @submit.prevent="createTag">
                    <input name="q" type="search" autocomplete="off" minlength="1" maxlength="20"
                           placeholder="Search for entries"
                           class="border-0 w-100 pl-2 form-control"
                           v-model="searchInput" @change="loadAllEntries">
                    <button type="button" id="app-search-button-icon" @click="loadAllEntries"
                            :disabled="currentGroup === null"
                            class="bg-transparent grey-background shape-rounded-corners-small d-inline-block flex-shrink-0 border-left qntm-icon-button border">
                        <img src="/images/icon_search.svg" alt="Search Icon">
                    </button>
                </form>

                <form class="ml-0" style="height: 38px">
                    <button type="button" @click="createNewEntry"
                            class="shape-rounded-corners-small border d-flex align-items-center qntm-icon-button flex-shrink-0 grey-background">
                        <svg id="app-new-button-icon" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
                             data-testid="AddIcon" tabindex="-1">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path>
                        </svg>
                    </button>
                </form>
            </div>
            <div class="qntm-navbar-link w-100 pl-4 m-0"
                 @click="loadSingleEntry(entry.id)" v-for="entry in allEntries"
                 :class="{'app-active-nav-link': entry.id === id}" v-cloak>
                <li class="qntm-navbar-list-item qntm-app-navbar-list-item font-special-text blue-font w-100 pl-1"
                    v-cloak>
                    {{ entry.title }}
                </li>
            </div>
        </ul>
        <div class="dropup app-dropdown mt-auto w-100">
            <button type="button" aria-haspopup="true" aria-expanded="false" @click="listAllGroups"
                    id="app-dropdown-button"
                    class="qntm-primary-button bg-white w-100 shape-rounded-corners-small border dropdown-toggle
                                    font-special-text font-extra-small-text grey-font">
                <span v-if="currentGroup !== null" v-cloak>{{ currentGroup.name }}</span>
                <span v-else>Select a group</span>
            </button>
            <div id="dropdownList"
                 class="app-dropdown-content position-absolute bg-white w-100"
                 style="bottom: 100%; box-shadow: 0 -8px 16px 0 rgba(0, 0, 0, 0.2);"
                 v-show="showAllGroups" v-cloak>
                <button type="button"
                        class="font-special-text grey-font text-center d-block app-dropdown-item w-100 bg-white"
                        @click="chooseGroup(grp.id)" v-for="grp in allGroups" v-if="grp !== currentGroup" v-cloak>
                    {{ grp.name }}
                </button>
                <a href="/groups" class="grey-font text-center d-block app-dropdown-item w-100
                                font-weight-bold font-extra-small-text"
                   v-if="allGroups.length === 1 && currentGroup !== null" v-cloak>
                    Create or join more groups!
                </a>
                <a href="/groups" class="grey-font text-center d-block app-dropdown-item w-100
                                font-weight-bold font-extra-small-text" v-if="allGroups.length === 0" v-cloak>
                    Create or join a group!
                </a>
            </div>
        </div>
    </div>
    <div class="flex-fill grey-background d-flex flex-row" role="dialog">
        <form class="flex-fill">
            <div class="d-flex flex-row align-items-center justify-content-between" style="height: 72px">
                <div class="pl-4 pt-3" v-cloak>
                    <h1 id="app-title" v-if="!isNewEntry || title !== ''" v-cloak>
                        {{ title }}
                    </h1>
                    <h1 id="app-title" v-if="hasOrganisation && isNewEntry && title ==='' && allGroups.length !== 0" v-cloak>
                        Create new content
                    </h1>
                </div>
                <label class="mr-4 mb-0 px-3 py-2 shape-rounded-corners-small font-extra-small-text font-weight-bold"
                       :class="state.COLOR" v-cloak>
                    {{ state.TEXT }}
                </label>
            </div>
            <div class="d-flex flex-wrap pt-3">
                <div class="flex-fill px-3">
                    <div class="bg-white shape-drop-shadow-straight shape-rounded-corners-big p-3 flex-grow-1 mb-4">
                        <div v-if="hasOrganisation && allGroups.length !== 0" v-cloak>
                            <div class="font-weight-bold font-extra-small-text" v-cloak>
                                <label for="entryTitle">Title:</label>
                            </div>
                            <textarea class="form-control flex-grow-1" name="title" type="text" minlength="1"
                                      maxlength="80" id="entryTitle" cols="30" rows="1" required
                                      v-model="title" @input="changeStatus" v-cloak></textarea>
                            <div class="mt-4 font-weight-bold font-extra-small-text" v-cloak>
                                <label for="entryContent">Content:</label>
                            </div>
                            <textarea class="form-control flex-grow-1" name="content" type="text" minlength="2"
                                      maxlength="1024" id="entryContent" cols="30" rows="15" required
                                      v-model="content" @input="changeStatus" v-cloak></textarea>
                            <div class="invalid-feedback">Please enter your content.</div>
                        </div>
                        <div v-else-if="hasOrganisation && allGroups.length === 0" id="app-no-grps-section"
                             class="d-flex flex-column align-items-center text-center m-0 pt-5" v-cloak>
                            <h2 class="font-normal-text w-50 pb-3" v-cloak>You need to join or create a group before
                                starting with content creation!</h2>
                            <button class="qntm-button font-special-text shape-rounded-corners-small" v-cloak>
                                <a class="toolbar-btn" href="/groups/new" v-cloak>Create your first group</a>
                            </button>
                        </div>
                        <div v-else id="app-no-grps-section"
                             class="d-flex flex-column align-items-center text-center m-0 pt-5" v-cloak>
                            <h2 class="font-normal-text w-50 pb-3" v-cloak>You need to join or create an organisation
                                before
                                starting with content creation!</h2>
                            <button class="qntm-button font-special-text shape-rounded-corners-small" v-cloak>
                                <a class="toolbar-btn" href="/organisation" v-cloak>Create or join an organisation</a>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="flex-fill px-3 app-info-column">
                    <!-- Container with Meta Information -->
                    <div class="bg-white shape-drop-shadow-straight shape-rounded-corners-big p-3 justify-content-center mb-4">
                        <div class="d-flex flex-column">
                            <div>
                                <h4>Information</h4>
                            </div>
                            <div class="qntm-pricing-separator-line mb-2 pt-1"></div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Created:</span>
                                <span v-cloak>{{ createdAt }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Updated:</span>
                                <span v-cloak>{{ updatedAt }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Author:</span>
                                <span class="text-truncate" v-cloak>{{ author }}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center align-content-center text-left app-info-text">
                                <span class="mr-2 font-extra-small-text font-weight-bold">Editor:</span>

                                <span class="text-truncate" v-cloak>
                                    {{ updatedFrom }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <!-- Container with additional features -->
                    <div class="bg-white shape-rounded-corners-big d-flex flex-column shape-drop-shadow-straight p-3">
                        <div class="ml-1 font-extra-small-text font-weight-bold float-left">
                            <label class="mb-1">Tags:</label>
                        </div>
                        <div class="d-flex flex-row flex-wrap w-100 app-tag-section" v-cloak>
                            <button class="d-flex border px-2 mr-1 mt-1 shape-rounded-corners-big align-items-center flex-nowrap app-tag-container bg-white"
                                    v-for="entry in tags" :key="entry.id" @click="searchForTag(entry.name)" v-cloak>
                                <span class="font-extra-small-text font-weight-bold"
                                      :style="{color: entry.colour}" v-cloak>●</span>
                                <span class="px-1 font-extra-small-text font-weight-bold text-truncate"
                                      v-cloak>{{ entry.name }}</span>
                                <span class="font-extra-small-text font-weight-bold app-tag-close-button shape-rounded-corners-big"
                                      @click="removeTag(entry.id)" v-cloak></span>
                            </button>
                            <button type="button" id="app-tag-add-container" :disabled="isNewEntry"
                                    @click="showTagCreation"
                                    class="d-flex border px-2 mr-1 mt-1 shape-rounded-corners-big align-items-center flex-nowrap bg-white">
                                <span class="font-extra-small-text font-weight-bold mr-1" v-show="showNewTagName"
                                      v-cloak>●</span>
                                <input class="font-extra-small-text font-weight-bold border-0"
                                       style="outline: none !important;" @input="changeTagNameWidth"
                                       v-model.trim="newTagName" :style="{width: newTagNameWidth}"
                                       v-show="showNewTagName" @change="createTag" required v-cloak>
                                <span class="font-extra-small-text font-weight-bold">+</span>
                            </button>
                        </div>
                        <div class="app-dropdown my-3">
                            <button type="button" aria-haspopup="true" aria-expanded="false" @click="listOldVersions"
                                    id="app-dropdown-button" :disabled="isNewEntry"
                                    class="qntm-primary-button grey-background w-100 shape-rounded-corners-small border dropdown-toggle
                                    font-special-text font-extra-small-text grey-font">
                                Retrieve older versions
                            </button>
                            <div id="dropdownList"
                                 class="app-dropdown-content position-absolute grey-background" v-show="showList"
                                 v-cloak>
                                <button type="button" class="grey-font text-center d-block app-dropdown-item"
                                        @click="retrieveOldVersion(ov.id)" v-for="ov in oldVersions"
                                        v-cloak>
                                    {{ ov.updatedAt }}
                                </button>

                                <span class="grey-font text-center d-block app-dropdown-item
                                font-weight-bold font-extra-small-text" v-if="oldVersions.length === 0" v-cloak>No other versions available!</span>
                            </div>
                        </div>
                        <div class="ml-1 font-extra-small-text font-weight-bold float-left">
                            <label for="entry_endpoint" class="mb-1">Endpoint:</label>
                        </div>
                        <div class="d-flex flex-column justify-content-center align-items-center">
                            <button type="button"
                                    class="mb-2 d-flex align-items-center grey-background border shape-rounded-corners-small"
                                    id="entry_endpoint_container" @click="copyURL">
                                <span class="text-truncate font-extra-small-text border-0 p-1 mr-2"> <span v-cloak>{{endpoint}}</span></span>
                                <img src="/images/icon-copy.svg" alt="Copy to clipboard"
                                     id="app-copy-button-icon"
                                     class="d-inline-block flex-shrink-0 mr-1 qntm-icon-button">
                            </button>
                            <div class="d-flex align-content-center align-content-center mt-2">
                                <div class="d-flex align-items-center">
                                    <span class="font-extra-small-text font-weight-bold ml-2 mr-3">Delete?</span>
                                    <div class="material-switch pull-right">
                                        <input id="app-delete-confirmation" name="delete-switch" type="checkbox"
                                               :disabled="isNewEntry" v-model="deleteBtnEnabled"/>
                                        <label for="app-delete-confirmation" class="label-danger"></label>
                                    </div>
                                </div>
                                <div class="ml-3 mr-1">
                                    <button id="app-delete-button" :disabled="!deleteBtnEnabled"
                                            class="qntm-primary-button qntm-secondary-button shape-rounded-corners-small font-special-text border-0"
                                            type="button" @click="destroy">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-around align-content-center align-items-center my-4">
                        <div>
                            <button class="qntm-primary-button shape-rounded-corners-small font-special-text border-0"
                                    type="button" @click="update" :disabled="currentGroup === null">
                                Save
                            </button>
                        </div>
                        <div>
                            <button class="qntm-primary-button qntm-secondary-button shape-rounded-corners-small font-special-text border-0"
                                    type="button" @click="reset" :disabled="currentGroup === null">
                                Revert
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<%- exposeLocalsToBrowser(); %>
<script>
  window.onload = () => {
    /* creating an enum for text state */
    const State = Object.freeze({
      NEW: {
        TEXT: '',
        COLOR: ''
      },
      ACTIVE: {
        TEXT: '✓ published',
        COLOR: 'editor-status-saved'
      },
      UNPUBLISHED: {
        TEXT: '⚠ unpublished changes',
        COLOR: 'editor-status-unpublished'
      },
      OLD_VERSION: {
        TEXT: '⚠ using old version',
        COLOR: 'editor-status-old'
      },
    });

    /* Converts a JS timestamp from milliseconds to readable time format */
    const convertDate = (date) => {
      let ISODate = new Date(date);

      let day = ISODate.getDate();
      let month = ISODate.getMonth() + 1;
      let year = ISODate.getFullYear();
      let hour = ISODate.getHours();
      let min = ISODate.getMinutes();

      // adds leading zero
      month = (month < 10 ? '0' : '') + month;
      day = (day < 10 ? '0' : '') + day;
      hour = (hour < 10 ? '0' : '') + hour;
      min = (min < 10 ? '0' : '') + min;

      return day + '/' + month + '/' + year + ' ' + hour + ':' + min;
    };

    let app = new Vue({
      el: '#editor',
      data: {
        hasOrganisation: false,
        allGroups: [],
        showAllGroups: false,
        currentGroup: null,
        allEntries: [],
        searchInput: '',
        id: '',
        title: '',
        originalTitle: '',
        content: '',
        originalContent: '',
        state: State.NEW,
        createdAt: '',
        updatedAt: '',
        author: '',
        updatedFrom: '',
        endpoint: '',
        deleteBtnEnabled: false,
        oldVersions: [],
        showList: false,
        newTagName: '',
        showNewTagName: false,
        newTagNameLength: 4,
        tags: [],
        isNewEntry: true,
      },
      computed: {
        newTagNameWidth: function () {
          return this.newTagNameLength + 'ch';
        }
      },
      methods: {
        loadOrganisation: function () {
          this.hasOrganisation = false;
          let origin = window.location.origin;
          let url = new URL(origin + '/api/organisation/findorg');

          fetch(url)
            .then(res => res.json())
            .then(data => {
              data.forEach(entry => {
                if (entry) {
                  this.hasOrganisation = true;
                }
              })

            });
        },
        loadAllGroups: function () {
          this.allGroups = [];
          let origin = window.location.origin;
          let url = new URL(origin + '/api/groups/findgrps');

          fetch(url)
            .then(res => res.json())
            .then(data => {
              let i = 0;
              data.forEach(entry => {
                if (i === 0) {
                  this.currentGroup = entry;
                  this.loadAllEntries();
                }
                this.allGroups.push(entry);
              });
            });
        },
        listAllGroups: function () {
          this.showAllGroups = !this.showAllGroups;
        },
        chooseGroup: function (groupId) {
          this.allGroups.forEach(entry => {
            if (entry.id === groupId) {
              this.currentGroup = entry;
            }
          });

          this.showAllGroups = false;
          this.loadAllEntries();
          this.createNewEntry();
        },
        loadAllEntries: function () {
          this.allEntries = [];
          // loads old versions
          let url = new URL(window.location.origin + '/api/textcontent/find');
          if (this.searchInput.length > 0) {
            url.searchParams.append('q', this.searchInput);
          }

          url.searchParams.append('group', this.currentGroup.id);

          fetch(url)
            .then(res => res.json())
            .then((data) => {
              data.forEach(entry => {
                this.allEntries.push(entry);
              });
            });
        },
        createNewEntry: function () {
          this.isNewEntry = true;
          this.id = '';
          this.title = '';
          this.originalTitle = '';
          this.content = '';
          this.originalContent = '';
          this.createdAt = '';
          this.updatedAt = '';
          this.author = '';
          this.updatedFrom = '';
          this.deleteBtnEnabled = false;
          this.endpoint = '';
          this.showNewTagName = false;
        },
        loadSingleEntry: function (entryId) {
          let url = new URL(window.location.origin + '/api/textcontent/findoneentry');
          url.searchParams.append('id', entryId);

          fetch(url)
            .then(res => res.json())
            .then((data) => {
              this.isNewEntry = false;
              this.id = data.id;
              this.title = data.title;
              this.originalTitle = data.title;
              this.content = data.content;
              this.originalContent = data.content;
              this.createdAt = convertDate(data.createdAt);
              this.updatedAt = convertDate(data.updatedAt);
              this.author = data.author.fullName;
              this.deleteBtnEnabled = false;

              this.updatedFrom = data.updatedFrom ? data.updatedFrom.fullName : '–';
              this.endpoint = data.endpoint;

              this.loadTags();
              this.loadOldVersions();
            });
        },
        loadOldVersions: function () {
          // loads old versions
          this.oldVersions = [];
          let id = this.id;
          let url = new URL(window.location.origin + '/api/textcontent/findoldversions');
          url.searchParams.append('id', id);

          fetch(url)
            .then(res => res.json())
            .then((data) => {
              data.forEach(entry => {
                entry.updatedAt = convertDate(entry.updatedAt);
                this.oldVersions.push(entry);
              });
            });
        },
        loadTags: function () {
          this.tags = [];
          // loads old versions
          let id = this.id;
          let url = new URL(window.location.origin + '/api/textcontent/findtags');
          url.searchParams.append('id', id);

          fetch(url)
            .then(res => res.json())
            .then((data) => {
              // first forEach accesses observer, second forEach accesses tag array
              data.forEach(entry => {
                entry.tags.forEach(entry => {
                  this.tags.push(entry);
                });
              });
            });
        },
        update: function () {
          if (this.title !== this.originalTitle || this.content !== this.originalTitle) {
            let formData;
            let url;
            if (this.isNewEntry) {
              formData = {
                title: this.title,
                content: this.content,
                group: this.currentGroup.id
              };
              url = new URL(window.location.origin + '/api/textcontent/save');

            } else {
              formData = {
                id: this.id,
                title: this.title,
                content: this.content
              };
              url = new URL(window.location.origin + '/api/textcontent/update');

            }
            const body = JSON.stringify(formData);
            const postForm = (body) => {
              return fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': window.SAILS_LOCALS._csrf
                },
                body
              });
            };
            postForm(body)
              .then(res => res.json())
              .then(data => {
                if (this.isNewEntry) {
                  this.isNewEntry = false;
                  this.loadSingleEntry(data.id);
                  this.loadAllEntries();
                } else {
                  this.originalTitle = this.title;
                  this.originalContent = this.content;
                  this.updatedAt = convertDate(data.updatedAt);
                  this.updatedFrom = data.updatedFrom;
                  this.oldVersions = [];

                  this.loadOldVersions();
                }

                this.state = State.ACTIVE;
              });
          }
        },
        destroy: function () {
          let id = this.id;
          let url = new URL(window.location.origin + '/api/textcontent/destroy');
          url.searchParams.append('id', id);

          fetch(url).then(() => {
            this.loadAllEntries();
            this.createNewEntry();
          });
        },
        showTagCreation: function () {
          if (!this.isNewEntry) {
            this.showNewTagName = true;
          }
        },
        searchForTag: function (tagName) {
          this.searchInput = tagName;
          this.loadAllEntries();
        },
        removeTag: function (tagId) {
          let id = this.id;
          let url = new URL(window.location.origin + '/api/textcontent/removetag');
          url.searchParams.append('id', id);
          url.searchParams.append('tagId', tagId);

          fetch(url).then(() => {
            this.loadTags();
            this.loadAllEntries();
          });
        },
        listOldVersions: function () {
          this.showList = !this.showList;
        },
        changeTagNameWidth: function () {
          if (this.newTagNameLength < 20) {
            const BASE_LENGTH = 4;
            this.newTagNameLength = Math.max(this.newTagName.length + BASE_LENGTH, BASE_LENGTH);
          }
        },
        createTag: function () {
          if (this.newTagName !== '') {
            const formData = {
              name: this.newTagName,
              textcontent: this.id
            };
            const body = JSON.stringify(formData);
            const postForm = (body) => {
              let url = new URL(window.location.origin + '/api/textcontent/createtag');
              return fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': window.SAILS_LOCALS._csrf
                },
                body
              });
            };
            postForm(body)
              .then(res => res.json())
              .then(data => {
                this.loadTags();
                this.newTagName = '';
                this.newTagNameLength = 4;
                this.showNewTagName = false;
              });
          } else {
            this.newTagName = '';
            this.showNewTagName = false;
          }
        },
        retrieveOldVersion: function (itemId) {
          let url = new URL(window.location.origin + '/api/textcontent/findoneoldversion');
          url.searchParams.append('id', itemId);

          fetch(url)
            .then(res => res.json())
            .then((data) => {
              this.title = data.title;
              this.content = data.content;
              this.state = State.OLD_VERSION;

              // hides dropdown after a version has been selected
              this.showList = !this.showList;
            });
        },
        copyURL: async function (mytext) {
          await navigator.clipboard.writeText(this.endpoint);
        },
        reset: function () {
          this.title = this.originalTitle;
          this.content = this.originalContent;
          this.showNewTagName = false;

          this.state = this.isNewEntry ? State.NEW : State.ACTIVE;
        },
        changeStatus: function () {
          if (this.title !== this.originalTitle || this.content !== this.originalContent) {
            this.state = State.UNPUBLISHED;
          } else if (!this.isNewEntry) {
            this.state = State.ACTIVE;
          } else {
            this.state = State.NEW;
          }
        }
      },
      /* created() hook for data fetching from backend API when being loaded */
      created() {
        this.loadOrganisation();
        this.loadAllGroups();
        if (this.allGroups.length > 0) {
          this.loadAllEntries();
        }
      }
    });
  };
</script>
